{{~
func com
    if !for.last 
        ret ','
    end
end
~}}


Blockly.Blocks['{{blockname}}'] = {
    init: function() {
        this.appendDummyInput()
            .appendField('{{jsfunction}}')
        // Returns data
{{~ for r in returns ~}}         
        this.setOutput(true, '{{r}}');
{{~ end ~}}

        // Params data
{{~ for p in parameters ~}} 
        this.appendValueInput('{{p.name}}')
            .setCheck('{{p.type}}')
            .appendField('{{p.name}}');
{{~ end ~}}

{{~ if returns.size == 0 ~}}
        this.setNextStatement(true);
        this.setPreviousStatement(true);
{{~ end ~}}
        this.setColour(160);
        this.setTooltip('{{description}}');
        this.setHelpUrl('{{url}}');
    }
};
javascript.javascriptGenerator.forBlock['{{blockname}}'] = (block, generator) => {
{{~ for p in parameters ~}} 
    const _{{p.name}} = generator.valueToCode(block, '{{p.name}}', javascript.javascriptGenerator.ORDER_ATOMIC);
{{~ end ~}}

{{if returns.size == 0}}
    return `{{jsfunction}}({{~ for p in parameters ~}} ${_{{p.name}}}{{~ com ~}}{{~ end ~}})`;
{{else}}
    return [`{{jsfunction}}({{~ for p in parameters ~}} ${_{{p.name}}}{{~ com ~}}{{~ end ~}})`, javascript.javascriptGenerator.ORDER_NONE];
{{end}}
};