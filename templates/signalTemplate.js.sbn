{{~
func com
    if !for.last 
        ret ','
    end
end
~}}

// Blockly signal
Blockly.Blocks['{{blockname}}'] = {
    init: function() {
        this.appendStatementInput('VALUE_INPUT')
            .appendField('{{jsfunction}}');

{{~ for p in parameters ~}} 
        this.appendDummyInput('{{p.name}}')
            .appendField('{{p.name}}:')
            .appendField(new Blockly.FieldVariable('{{name}}_{{p.name}}'), '{{p.name}}');
{{~ end ~}}

        this.setColour('{{color}}');
        this.setTooltip('{{description}}');
        this.setHelpUrl('{{url}}');
    }
};
javascript.javascriptGenerator.forBlock['{{blockname}}'] = (block, generator) => {
    const innerCode = generator.statementToCode(block, 'VALUE_INPUT');
{{~ for p in parameters ~}} 
    const {{p.name}} = generator.getVariableName(block.getFieldValue('{{p.name}}'));
{{~ end ~}}

{{ if parameters.size == 0 }}
return `{{jsfunction}}.connect(() => {
${innerCode}
});\n`;
{{- else -}}
return `{{jsfunction}}.connect({{- for p in parameters -}} _{{p.name}}{{- com -}}{{- end -}}) => {
{{- for p in parameters }} 
  ${%%{{}%%}{{p.name}}{%%{}}%%} = _{{p.name}};
{{- end }}
${innerCode}
});\n`;
{{- end -}}

};
